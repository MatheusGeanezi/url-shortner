openapi: 3.0.0
info:
  title: User API
  description: API para gerenciar usuários.
  version: 1.0.0
paths:
  /api/user/register:
    post:
      summary: Registra um novo usuário
      description: Endpoint para cadastrar um novo usuário no sistema.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: securepassword123
                name:
                  type: string
                  example: João Silva
              required:
                - email
                - password
                - name
      responses:
        201:
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "64bd4f5c3ecf4a5cbe12d9e3"
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: João Silva
        400:
          description: Dados inválidos
        500:
          description: Erro no servidor
  /api/user/login:
    post:
      summary: Realiza o login de um usuário
      description: Endpoint para autenticar um usuário com e-mail e senha e retornar um token JWT.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: securepassword123
              required:
                - email
                - password
      responses:
        200:
          description: Login bem-sucedido. Retorna um token JWT.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YmY0YzYyNzZmZDRmMjM2NDJiNjUyYzIiLCJlbWFpbCI6InVzZXJAZG9tYWluLmNvbSIsImlhdCI6MTYzODU3MTI5OCwiZXhwIjoxNjM4NTc0MDk4fQ.Og59ZKdUckmUtKxlwzpeh5hDe2bzH4WymRGRpLvNbbI"
        400:
          description: E-mail ou senha inválidos
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'E-mail ou senha inválidos.'
        500:
          description: Erro no servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro interno do servidor.'

  /api/url/shorten:
    post:
      summary: 'Encurta uma URL'
      description: 'Encurta a URL fornecida e retorna o URL encurtado'
      tags:
        - Urls
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                longUrl:
                  type: string
                  example: https://www.exemplo.com
              required:
                - longUrl
      responses:
        200:
          description: 'URL encurtada criada com sucesso'
  /api/url/:
    get:
      summary: 'Lista todas as URLs encurtadas do usuário autenticado'
      description: 'Retorna a lista de URLs encurtadas pertencentes ao usuário autenticado, com a quantidade de cliques.'
      tags:
        - Urls
      responses:
        '200':
          description: 'Lista de URLs encurtadas'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    shortUrl:
                      type: string
                    longUrl:
                      type: string
                    clicks:
                      type: integer
        '401':
          description: 'Não autorizado - Token não fornecido ou inválido'
        '500':
          description: 'Erro interno do servidor'

  /api/url/redirect/{shortUrl}:
    get:
      summary: "Redireciona para a URL de origem e contabiliza os cliques"
      description: "Recebe uma URL encurtada e redireciona para a URL original, contabilizando o número de cliques."
      tags:
        - Urls
      parameters:
        - in: path
          name: shortUrl
          required: true
          schema:
            type: string
          description: "A URL encurtada para redirecionamento"
      responses:
        302:
          description: "Redirecionamento para a URL original"
          headers:
            Location:
              description: "URL de destino para redirecionamento"
              schema:
                type: string
                example: "https://www.google.com"
        400:
          description: "URL encurtada não encontrada ou inválida"
        404:
          description: "URL não encontrada"
        500:
          description: "Erro interno do servidor"

  /api/url/{shortUrl}:
    delete:
      summary: "Deleta uma URL encurtada"
      description: "Deleta uma URL encurtada"
      tags:
        - Urls
      parameters:
        - in: path
          name: shortUrl
          required: true
          schema:
            type: string
          description: "Deleta uma URL encurtada"
      responses:
        302:
          description: "Deleta uma URL encurtada"
          headers:
            Location:
              description: "Deleta uma URL encurtada"
              schema:
                type: string
                example: "igiSHt"
        400:
          description: "URL encurtada não encontrada ou inválida"
        404:
          description: "URL não encontrada"
        500:
          description: "Erro interno do servidor"         

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []       

  
